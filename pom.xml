<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>io.github.yilengyao</groupId>
  <artifactId>openai</artifactId>
  <packaging>jar</packaging>
  <version>1.0.0</version>
  <name>OpenAI Java Library</name>
  <url>https://github.com/yilengyao/openai-java</url>
  <description>Java utility for accessing OpenAI's API</description>

  <licenses>
    <license>
      <name>MIT License</name>
      <url>http://www.opensource.org/licenses/mit-license.php</url>
    </license>
  </licenses>

  <developers>
    <developer>
      <name>Yi leng Yao</name>
      <organization>Yi leng Yao</organization>
      <organizationUrl>https://www.linkedin.com/in/yi-leng-yao-84451275/</organizationUrl>
    </developer>
  </developers>

  <scm>
    <connection>scm:git:git://github.com/yilengyao/openai-java.git</connection>
    <developerConnection>scm:git:ssh://github.com:yilengyao/openai-java.git</developerConnection>
    <url>http://github.com/yilengyao/openai-java/tree/main</url>
  </scm>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <java.version>17</java.version>
    <maven.compiler.version>3.8.0</maven.compiler.version>
    <package.name>io.github.yilengyao.openai</package.name>
    <lombok.version>1.18.20</lombok.version>
    <junit.version>3.8.1</junit.version>
    <dgs.version>7.5.1</dgs.version>
    <graphqlcodegen.version>1.18</graphqlcodegen.version>
    <spring.framework.version>6.1.14</spring.framework.version>
    <build.helper.maven.version>3.4.0</build.helper.maven.version>
    <starter.aop.version>3.1.3</starter.aop.version>
    <aspectj.weaver.version>1.9.19</aspectj.weaver.version>
    <javax.annotation.version>1.3.2</javax.annotation.version>
    <graphql.extendedscalar.version>21.0</graphql.extendedscalar.version>
  </properties>

  <distributionManagement>
    <snapshotRepository>
      <id>ossrh</id>
      <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>
    </snapshotRepository>
    <repository>
      <id>ossrh</id>
      <url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url>
    </repository>
  </distributionManagement>

  <dependencies>
    <dependency>
      <groupId>javax.annotation</groupId>
      <artifactId>javax.annotation-api</artifactId>
      <version>${javax.annotation.version}</version>
    </dependency>

    <!-- Spring WebFlux Dependency -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webflux</artifactId>
      <version>${spring.framework.version}</version>
    </dependency>

    <!-- Spring Context Dependency -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>${spring.framework.version}</version>
    </dependency>

    <!-- Lombok -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${lombok.version}</version>
      <optional>true</optional>
    </dependency>

    <!-- GraphQL -->
    <dependency>
      <groupId>com.netflix.graphql.dgs</groupId>
      <artifactId>graphql-dgs-spring-boot-starter</artifactId>
      <version>${dgs.version}</version>
    </dependency>
    <dependency>
      <groupId>com.graphql-java</groupId>
      <artifactId>graphql-java-extended-scalars</artifactId>
      <version>${graphql.extendedscalar.version}</version>
    </dependency>

    <!-- Testing -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- Spring AOP and AspectJ -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-aop</artifactId>
      <version>${starter.aop.version}</version>
    </dependency>
    <dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjweaver</artifactId>
      <version>${aspectj.weaver.version}</version>
    </dependency>

  </dependencies>

  <build>
    <plugins>
      <!-- Plugin to compiling Java source code of Maven project -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven.compiler.version}</version>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
        </configuration>
      </plugin>

      <plugin>
        <groupId>io.github.deweyjose</groupId>
        <artifactId>graphqlcodegen-maven-plugin</artifactId>
        <version>${graphqlcodegen.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>generate</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <schemaPaths>
            <param>src/main/resources/schema/openai.graphqls</param>
          </schemaPaths>
          <packageName>${package.name}.graphql.generated</packageName>
          <generateCustomAnnotations>true</generateCustomAnnotations>
        </configuration>
      </plugin>


      <!-- Add the generated GraphQL types in generated-sources folder to the classpath -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>${build.helper.maven.version}</version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${project.build.directory}/generated-sources</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Plugin to deploy to maven central repository -->
      <plugin>
        <groupId>org.sonatype.plugins</groupId>
        <artifactId>nexus-staging-maven-plugin</artifactId>
        <version>1.6.13</version>
        <extensions>true</extensions>
        <configuration>
          <serverId>ossrh</serverId>
          <nexusUrl>https://s01.oss.sonatype.org/</nexusUrl>
          <autoReleaseAfterClose>${env.AUTO_RELEASE_AFTER_CLOSE}</autoReleaseAfterClose>
        </configuration>
      </plugin>


      <!-- Plugin for Javadoc and Sources -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>2.2.1</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.3.0</version>
        <configuration>
          <links>
            <link>https://docs.oracle.com/en/java/javase/17/docs/api/</link>
          </links>
          <excludes>
            **/target/generated-sources/**
          </excludes>
          <excludes>
            **/target/generated-sources/**
          </excludes>
          <excludePackageNames>*.generated.*</excludePackageNames>
          <doclint>none</doclint>
        </configuration>
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- GPG Signed Components -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-gpg-plugin</artifactId>
        <version>1.5</version>
        <executions>
          <execution>
            <id>sign-artifacts</id>
            <phase>verify</phase>
            <goals>
              <goal>sign</goal>
            </goals>
            <configuration>
              <gpgArguments>
                <arg>--pinentry-mode</arg>
                <arg>loopback</arg>
              </gpgArguments>
              <passphrase>${env.GPG_PASSPHRASE}</passphrase>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

</project>
